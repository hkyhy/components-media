{"version":3,"file":"static/js/746.7d62d2ca.chunk.js","mappings":"0RAGaA,E,gDACAC,EAAaC,EC4F1B,EA7FqB,CACjBC,KAAM,YACNC,QAAS,uDAGTC,IAAK,ynBAyBLC,QAAS,CACLC,QAAQ,EACRC,UAAW,kBACXC,MAAO,GACPC,KAAM,CAAC,CACXC,MAAO,mDACPC,YAAa,mDACbC,KAAM,2zBAwCNC,MAAO,CAAC,CACRX,KAAM,aACNY,YAAa,wBACbC,UAAW,GACb,CACEb,KAAM,OACNY,YAAa,OACbC,UAAW,GACb,CACEb,KAAM,UACNY,YAAa,6BACbC,UAAW,O,oECxFf,MA2KA,EA3KqB,CACjBb,KAAM,YACNC,QAAS,sEAGTC,IAAK,4JAULC,QAAS,CACLC,QAAQ,EACRC,UAAW,kBACXC,MAAO,GACPC,KAAM,CAAC,CACXC,MAAO,mDACPC,YAAa,mDACbC,KAAM,sjIAqINC,MAAO,CAAC,CACRX,KAAM,aACNY,YAAa,wBACbC,UAAW,GACb,CACEb,KAAM,OACNY,YAAa,OACbC,UAAW,GACb,CACEb,KAAM,eACNY,YAAa,qBACbC,UAAW,O,0DCvKf,MA4EA,EA5EqB,CACjBb,KAAM,SACNC,QAAS,wLAGTC,IAAK,4JAULC,QAAS,CACLC,QAAQ,EACRC,UAAW,eACXC,MAAO,GACPC,KAAM,CAAC,CACXC,MAAO,mDACPC,YAAa,mDACbC,KAAM,64BA0CNC,MAAO,CAAC,CACRX,KAAM,UACNY,YAAa,qBACbC,UAAW,GACb,CACEb,KAAM,OACNY,YAAa,OACbC,UAAW,O,+CCxEf,SAAiB,E,oGCOjB,MAoEA,GApEkBC,EAAAA,EAAAA,iBAAgB,CAChCC,QAAS,KACTC,OAAQC,gBACAC,QAAQC,IAAI,CAChB,IAAID,SAAQ,CAACE,EAASC,KACpB,GAAKC,SAASC,KAAKC,cAAc,mCAU/BJ,QAVmE,CACnE,MAAMK,EAAMH,SAASI,cAAc,QACnCD,EAAIE,aAAa,OAAQ,8EACzBF,EAAIE,aAAa,MAAO,cACxBL,SAASC,KAAKK,OAAOH,GACrBA,EAAII,iBAAiB,QAAQ,KAC3BT,GAAS,IAEXK,EAAII,iBAAiB,QAASR,EAChC,CAEA,KAEFS,EAAAA,EAAAA,iBAAgB,YAAa,GAAI,kFAE5B,CAAEC,UAAWC,OAAOD,aApBbjB,EAsBfmB,IAA0D,IAAzD,UAAE5B,EAAS,KAAE6B,EAAI,OAAEC,EAAQC,cAAeC,GAASJ,EACrD,MAAMK,GAAcC,EAAAA,EAAAA,SAAQC,QAAQ,KAAM,KACpCT,GAAYU,EAAAA,EAAAA,QAAOP,EAAKH,WACxBK,GAAgBK,EAAAA,EAAAA,QAAOJ,GACvBK,GAAeD,EAAAA,EAAAA,WACf,OAAEE,GAAWN,EACnBD,EAAcQ,QAAUP,EACxB,MAAMQ,EAAcC,IAAeX,GAgCnC,OA/BAY,EAAAA,EAAAA,YAAU,KACRL,EAAaE,QAAU,IAAIb,EAAUa,QACnCI,OAAOC,OACL,CACEC,UAAU,GAEZd,EAAcQ,QACd,CAAEO,GAAIb,EAAaK,YAErB,SAAUS,GAAS,IAADC,EAEhB,GADAR,EAAYO,GACa,QAAzBC,EAAIjB,EAAcQ,eAAO,IAAAS,GAArBA,EAAuBC,SAAU,CACnC,MAAMC,EAAUC,KAAK,KACnBJ,EAAOK,KAAKrB,EAAcQ,QAAQU,UAClCI,YAAW,KACLN,EAAOO,iBAAmB,EAC5BrC,SAASsC,gBAAgBC,oBAAoB,YAAaN,GAAS,GAEnEjC,SAASsC,gBAAgB/B,iBAAiB,YAAa0B,GAAS,EAClE,GACC,IAAK,IAEVjC,SAASsC,gBAAgB/B,iBAAiB,YAAa0B,GAAS,EAClE,CACF,IAGK,KACLb,EAAaE,SAAWF,EAAaE,QAAQkB,KAAOpB,EAAaE,QAAQmB,SAAS,IAEnF,CAACzB,EAAaK,EAAQE,KAEvBmB,EAAAA,EAAAA,KAAA,OAAK3D,UAAW4D,IAAW5D,EAAWC,EAAM,eAAe4D,UACzDF,EAAAA,EAAAA,KAAA,OAAKb,GAAIb,KACL,G,oMCtEV,MAIA,EAJgB6B,KACPC,EAAAA,EAAAA,KAAS5B,QAAQ,KAAM,ICyGhC,EAxGkBP,IAAqC,IAApC,OAAEoC,EAAM,SAAEC,EAAQ,SAAEC,GAAUtC,EAC/C,MAAMuC,GAAQ/B,EAAAA,EAAAA,QAAO,MACfgC,EAAQ3B,KAAe7B,UAAuB,IAAhB,OAAEyD,GAAQC,EAC1C,MAAMC,QAAiBN,IACvB,IAAKM,EACH,MAAM,IAAIC,MAAM,iCAGlB,MAAM,MAAEC,EAAK,OAAEC,GAAWH,EACpBI,EAAK,IAAIC,UAAU,0DAADC,OAA2DJ,IAC7EK,EAAYhB,UACZ,IAAIjD,SAAQE,IAChBgE,QAAQC,IAAI,QACZL,EAAGnD,iBAAiB,QAAQ,KAC1BuD,QAAQC,IAAI,kCACZL,EAAGM,KACDC,KAAKC,UAAU,CACbC,OAAQ,CACNC,WAAYP,EACZQ,QAAStB,EACTuB,UAAW,oBACX5F,KAAM,qBACN6F,OAAQd,GAEVe,QAAS,CACPC,OAAQ,MACRC,YAAa,KACbC,qBAAsB,IACtBC,4BAA4B,EAC5BC,+BAA+B,EAC/BC,mCAAmC,KAGxC,IAEHpB,EAAGnD,iBAAiB,WAAWwE,IAC7B,MAAMnE,EAAOqD,KAAKe,MAAMD,EAAEnE,MACD,yBAArBA,EAAKuD,OAAOzF,OACdoF,QAAQC,IAAI,SACZjE,KAEuB,+BAArBc,EAAKuD,OAAOzF,MACduE,GAAYA,EAASrC,EAAK4D,SAEH,gBAArB5D,EAAKuD,OAAOzF,MACduE,GAAYA,EAASrC,EAAK4D,QAC5B,GACA,IAEJ,MAAMS,EAAe,IAAKvE,OAAOwE,cAAgBxE,OAAOyE,oBAAoB,CAC1EC,WAAY,OAERC,EAAaJ,EAAaK,wBAAwBlC,GAGlDmC,EAAkBN,EAAaO,sBAAsB,KAAM,EAAG,GACpED,EAAgBE,eAAiB,SAAUC,GACzC,MAAMC,EAAYD,EAAME,YAAYC,eAAe,GAC7CC,EAAc,IAAIC,WAAWJ,EAAUK,QAC7C,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAUK,SAAUC,EACtCH,EAAYG,GAA+C,MAA1CC,KAAKC,KAAK,EAAGD,KAAKE,IAAI,EAAGT,EAAUM,KAEtDvC,EAAGM,KAAK8B,EAAYO,OACtB,EACAhB,EAAWiB,QAAQf,GACnBA,EAAgBe,QAAQrB,EAAasB,aACrCzC,QAAQC,IAAI,4BAEZb,EAAM5B,QAAU,CAAEoC,KAAIX,SAAQc,YAAW0B,kBAAiBF,aAAYjC,SAAQ6B,eAAcxB,SAAQ,IAEtG+C,EAAMhF,KAAe,KACnB,IAAK0B,EAAM5B,QAET,YADAwC,QAAQ2C,KAAK,4EAGf,MAAM,GAAE/C,EAAE,OAAEX,EAAM,UAAEc,EAAS,gBAAE0B,EAAe,WAAEF,EAAU,aAAEJ,EAAY,OAAExB,GAAWP,EAAM5B,QAwB3F,OAvBAoC,EAAGM,KACDC,KAAKC,UAAU,CACbC,OAAQ,CACNC,WAAYP,EACZQ,QAAStB,EACTuB,UAAW,oBACX5F,KAAM,oBACN6F,OAAQd,MAIdC,EAAGgD,QACCnB,GACFA,EAAgBoB,aAEdtB,GACFA,EAAWsB,aAET1B,GACFA,EAAayB,QAEfxD,EAAM5B,QAAU,KAET,CAAEyB,SAAQc,YAAW,IAEhC,MAAO,CAAEV,QAAOqD,MAAK,E,mJCnGVI,GAAkBC,EAAAA,EAAAA,wBAAuB,CACpDC,QAAS,CAAC,qCADmBD,EAE5BlG,IAA+F,IAA9F,cAAEoG,EAAa,OAAEhE,EAAM,WAAEiE,EAAU,SAAEC,EAAQ,SAAEC,EAAQ,UAAEC,EAAS,SAAEvE,GAAoBjC,EAAPyG,GAAKC,EAAAA,EAAAA,GAAA1G,EAAA2G,GACxF,MAAOC,GAAaR,GACd,KAAES,EAAI,KAAEC,GAASF,KAChBG,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,CAAC,GAC5CC,GAASC,EAAAA,EAAAA,UAAQ,IACdpG,OAAOqG,KAAKL,GAChBM,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACnBC,KAAIC,GAASV,EAAaU,KAC1BC,KAAK,KACP,CAACX,KACE,MAAEvE,EAAK,IAAEqD,GAAQ8B,EAAU,CAC/BvF,SACAE,SAAUrC,IACR+G,GAAgBY,GACP7G,OAAOC,OAAO,CAAC,EAAG4G,EAAQ,CAAE,CAAC3H,EAAKwH,OAAQxH,EAAKiH,UACtD,EAEJ7E,SAAUrD,UACR,MAAM,KAAEiB,SAAe4G,EAAK9F,OAAOC,OAAO,CAAC,EAAG8F,EAAKe,UAAUxF,WAC7D,GAAkB,IAAdpC,EAAKxB,KAGT,OAAOwB,EAAKA,IAAI,KAId,UAAE6H,EAAWtF,MAAOuF,EAAaC,KAAMC,IAAeC,EAAAA,EAAAA,kBAEtDC,EAAetH,KAAe7B,UAClCgI,EAAgB,IAChB,MAAM,OAAEvE,SAAiBsF,UACnBvF,EAAM,CAAEC,UAAS,IAGnB2F,EAAgBvH,KAAe7B,gBAC7BiJ,IACNpC,IACAU,GAAYA,GAAU,IAGlB8B,EAAkBxH,KAAe7B,UACrC,MAAM4I,QAAeK,KACf,OAAE7F,EAAM,UAAEc,GAAc2C,IACxByC,EAAO,IAAIC,KAAK,CAAC,IAAIC,KAAKZ,EAAQ,CAAEa,KAAM,eAAgB,GAADxF,OAAKuD,GAAS,GAAAvD,OAAOb,EAAM,KAAAa,OAAIC,GAAW,QAAQ,CAAEuF,KAAM,eACjHxI,KAAMyI,SAAuC,oBAAbpC,EAA0BA,EAAWQ,EAAK6B,WAAW,CAAEL,SAC1E,IAAjBI,EAAQjK,MAGZ4H,GAAcA,EAAW,CAAEjE,SAAQc,YAAWgE,SAAQ0B,MAAOF,EAAQzI,MAAO,IAGxE4I,EAAgBhI,KAAe,kBAAciH,EAAYO,KAAgBS,WAAWX,KAAaW,UAAQ,IAE/G,OAAO7G,GAAQ8G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACZtC,GAAK,IACRqB,YACAZ,SACA1E,MAAO2F,EACPa,OAAQZ,EACRa,SAAUZ,EACVa,OAAQL,IACR,IC3DJ,EAVgBzI,IACd,MAAM,OAAE+I,GAAWpI,OAAOC,OAAO,CAAC,EAAG,CAAEmI,OAAQ,QAAU/I,GACzD,MAAO,CACLiC,SAAU,CACR+G,IAAI,GAADnG,OAAKkG,EAAM,aACdE,OAAQ,QAEX,E,oCCFGC,EFmEgBC,IAAoB9C,IAEtC1E,EAAAA,EAAAA,KAACkE,GAAe8C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtC,GAAK,IAAAxE,SACvBS,IAAA,IAAC,OAAEwE,EAAM,MAAE1E,EAAK,SAAEyG,EAAQ,OAAED,GAAkBtG,EAAP+D,GAAKC,EAAAA,EAAAA,GAAAhE,EAAA8G,GAAA,OAC3CzH,EAAAA,EAAAA,KAACwH,GAAgBR,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtC,GAAK,IAAES,OAAQA,EAAQ8B,OAAQA,EAAQS,QAASjH,EAAO6D,WAAY4C,IAAY,KEvE3FS,EAAc1J,IAAgD,IAA/C,OAAEkH,EAAM,QAAEuC,EAAO,WAAEpD,GAAsBrG,EAAPyG,GAAKC,EAAAA,EAAAA,GAAA1G,EAAA2G,GACtE,OACEgD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3H,SAAA,EACEF,EAAAA,EAAAA,KAAC8H,EAAAA,mBAAiBd,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtC,GAAK,IAAEgD,QAASA,EAASpD,WAAYA,KAC3Da,IAAUnF,EAAAA,EAAAA,KAAA,OAAAE,SAAMiF,MAChB,IAIPoC,EAAUQ,QAAUA,EACpBR,EAAU3B,UAAYA,EACtB2B,EAAUrD,gBAAkBA,EAE5B,S,4ZCbaiC,EAAiB9H,IAC5B,MAAM,WAAEiG,EAAU,OAAE0D,EAAM,QAAEN,GAAY1I,OAAOC,OAAO,CAAC,EAAGZ,IACnD0H,EAAWkC,IAAgB/C,EAAAA,EAAAA,WAAS,GACrCgD,GAAWzJ,EAAAA,EAAAA,QAAO,KAClB,QAAE0J,GAAYC,EAAAA,IAAIC,SAClB/B,EAAkBxH,IAAewF,GACjCgE,EAAcxJ,IAAekJ,GAC7B5B,EAAetH,IAAe4I,GAC9BjH,EAAQ3B,KAAe7B,UAC3B,MAAMyD,QAAe1C,OAAOuK,UAAUC,aAAaC,aAAa,CAAE5B,OAAO,IAAQ6B,OAAMrG,IAErF,MADA8F,EAAQQ,MAAM,gHACRtG,CAAC,IAEHuG,EAAW,IAAI5K,OAAO6K,cAAcnI,GAC1CwH,EAAStJ,QAAU,CAAE8B,SAAQkI,YAC7B,MAAME,EAAS,CACb,CACE,QACA,KACEZ,EAAStJ,QAAQiH,OAAS,GAC1BO,EAAa,CAAE1F,SAAQkI,YAAW,GAGtC,CACE,gBACAvG,IACEiG,EAAYjG,EAAEnE,MACdgK,EAAStJ,QAAQiH,OAAOkD,KAAK1G,EAAEnE,KAAK,IAQ1C,OAJAgK,EAAStJ,QAAQkK,OAASA,EAC1BA,EAAOE,SAAQ/K,IAAA,IAAEjC,EAAMuD,GAAQtB,EAAA,OAAK2K,EAAS/K,iBAAiB7B,EAAMuD,EAAQ,IAC5EqJ,EAASnI,MAAM,KACfwH,GAAa,GACN,CAAEvH,SAAQkI,WAAU,IAGvB3C,EAAOnH,KAAe7B,UAE1B,IADCgM,GAAahB,GAAa,IACtBC,EAAStJ,QACZ,MAAO,GAET,MAAM,OAAEkK,EAAM,SAAEF,EAAQ,OAAElI,EAAM,OAAEmF,GAAWqC,EAAStJ,QAKtD,OAJAkK,EAAOE,SAAQrI,IAAA,IAAE3E,EAAMuD,GAAQoB,EAAA,OAAKiI,EAAS/I,oBAAoB7D,EAAMuD,EAAQ,IAC/EmB,EAAOwI,YAAYF,SAAQG,GAASA,EAAMlD,SAC1CiC,EAAStJ,QAAU,WACb0H,EAAgBT,GACfA,CAAM,IAGTsB,EAASrI,KAAe7B,UACxB8I,QACIE,UAEAxF,GACR,IAGF,MAAO,CACLsF,YACAtF,QACAwF,OACAkB,SACD,EAGUiC,EAAkB5B,GACtB6B,IAAgD,IAA/C,WAAE/E,EAAU,OAAE0D,EAAM,QAAEN,GAAmB2B,EAAP3E,GAAKC,EAAAA,EAAAA,GAAA0E,EAAAzE,GAC7C,MAAM,UAAEmB,EAAS,MAAEtF,EAAK,KAAEwF,EAAI,OAAEkB,GAAWhB,EAAe,CAAE7B,aAAY0D,SAAQN,YAEhF,OAAO1H,EAAAA,EAAAA,KAACwH,GAAgBR,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtC,GAAK,IAAEqB,UAAWA,EAAWtF,MAAOA,EAAOwF,KAAMA,EAAMqD,QAASnC,IAAU,EAI9FoC,EAAoBC,IAA6B,IAA5B,SAAEtJ,GAAoBsJ,EACtD,OAAOtJ,GAD6CyE,EAAAA,EAAAA,GAAA6E,EAAA/B,GAC9B,EAYxB,EAT0B2B,GACxBjF,EAAAA,EAAAA,wBAAuB,CACrBC,QAAS,CAAC,kCADZD,EAEGsF,IAAoE,IAAnE,cAAEpF,EAAa,UAAE0B,EAAS,SAAE7F,EAAQ,MAAEO,EAAK,KAAEwF,GAAgBwD,EAAP/E,GAAKC,EAAAA,EAAAA,GAAA8E,EAAAC,GAC7D,MAAOC,GAAiBtF,EACxB,OAAOrE,EAAAA,EAAAA,KAAC2J,GAAa3C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtC,GAAK,IAAAxE,SAAGA,EAAWA,EAAS6F,GAAaA,EAAY,2BAAS,6BAAuB,K,uCCtFtG6D,EAAiB3L,IAAc,IAAb,IAAE4L,GAAK5L,EACpC,MAAO6L,EAASC,IAAc7E,EAAAA,EAAAA,WAAS,GACjC2B,GAAQzB,EAAAA,EAAAA,UAAQ,KACpB,GAAKyE,EAGL,OAAO,IAAIG,MAAMH,aAAepD,KAAOwD,IAAIC,gBAAgBL,GAAOA,EAAI,GACrE,CAACA,IAaJ,OAXA9K,EAAAA,EAAAA,YAAU,KACR8H,EAAMhJ,iBAAiB,SAAS,KAC9BkM,GAAW,EAAM,IAEZ,KACDF,aAAepD,MACjBwD,IAAIE,gBAAgBtD,EAAMgD,IAC5B,IAED,CAAChD,EAAOgD,IAEJ,CACLC,UACAM,KAAMnN,UACJ4J,EAAMwD,YAAc,QACdxD,EAAMuD,OACZL,GAAW,EAAK,EAElBO,MAAOA,KACLzD,EAAMyD,QACNP,GAAW,EAAM,EAEnBQ,YAAatN,SACN4J,EAAM2D,SAUa,IAAjB3D,EAAM2D,SATJ,IAAItN,SAAQ,CAACE,EAASC,KAC3BwJ,EAAMhJ,iBAAiB,kBAAkB,KACvCT,GAAS,IAEXyJ,EAAMhJ,iBAAiB,SAASwE,IAC9BhF,EAAOgF,EAAE,GACT,IAKT,EAGUoI,EAAkBjD,GACtB7G,IAAwB,IAAvB,IAAEkJ,GAAelJ,EAAP+D,GAAKC,EAAAA,EAAAA,GAAAhE,EAAAiE,GACrB,MAAM,QAAEkF,EAAO,KAAEM,EAAI,MAAEE,GAAUV,EAAe,CAAEC,QAClD,OACE7J,EAAAA,EAAAA,KAAA6H,EAAAA,SAAA,CAAA3H,UACEF,EAAAA,EAAAA,KAACwH,GAAgBR,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXtC,GAAK,IACToF,QAASA,EACTR,QAASA,KACHQ,EACFQ,IAEAF,GACF,MAGH,EAKIM,EAAoBD,GAAgBpB,IAA6B,IAA5B,SAAEnJ,GAAoBmJ,EACtE,OAAOnJ,GAD6DyE,EAAAA,EAAAA,GAAA0E,EAAA5B,GAC9C,IAOxB,EAJ0BgD,GAAgBjB,IAA4B,IAA3B,QAAEM,GAAmBN,EAAP9E,GAAKC,EAAAA,EAAAA,GAAA6E,EAAAE,GAC5D,OAAO1J,EAAAA,EAAAA,KAAC2K,EAAAA,QAAM3D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKtC,GAAK,IAAAxE,SAAG4J,EAAU,8BAAY,6BAAgB,G","sources":["components/AliPlayer/mock.js","components/AliPlayer/README.md","components/AliSpeech/README.md","components/Speech/README.md","components/AliPlayer/style.module.scss","components/AliPlayer/index.js","components/AliSpeech/getUUID.js","components/AliSpeech/useSpeech.js","components/AliSpeech/withAliSpeech.js","components/AliSpeech/getApis.js","components/AliSpeech/index.js","components/Speech/AudioRecordButton.js","components/Speech/AudioPlayerButton.js"],"sourcesContent":["import _exVideoSrc from './ex.mp4';\nimport _exSrtSrc from './exa.vtt';\n\nexport const exSrtSrc = _exSrtSrc;\nexport const exVideoSrc = _exVideoSrc;\n","import * as component_6 from '@components/AliPlayer';\nimport * as component_7 from 'antd';\nimport * as component_8 from '@components/AliPlayer/mock';\nconst readmeConfig = {\n    name: `AliPlayer`,\n    summary: `<p>阿里云视频点播SDK</p>`,\n    \n    \n    api: `<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerOptions</td>\n<td>播放器详细参数</td>\n<td>object</td>\n<td></td>\n</tr>\n<tr>\n<td>playerOptions.source</td>\n<td>播放地址</td>\n<td>string</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>其他参数请参考 <a href=\"https://help.aliyun.com/zh/vod/support/faq-about-apsaravideo-player-for-web-2?spm=a2c4g.11186623.0.0.40827c32IM33AJ\">阿里云web播放器文档</a></p>`,\n    example: {\n        isFull: false,\n        className: `AliPlayer_fd6b0`,\n        style: ``,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: AliPlayer } = _AliPlayer;\nconst { useRef } = React;\nconst { Button, Space } = antd;\nconst { exSrtSrc, exVideoSrc } = _config;\n\nconst BaseExample = () => {\n  const ref = useRef();\n  return (\n    <Space direction=\"vertical\" size={32}>\n      <Button\n        onClick={() => {\n          console.log(ref.current);\n        }}\n      >\n        获取api\n      </Button>\n\n      <AliPlayer\n        ref={ref}\n        playerOptions={{\n          height: '600px',\n          width: '1000px',\n          source: exVideoSrc,\n          textTracks: [\n            {\n              kind: 'subtitles',\n              label: 'English',\n              src: exSrtSrc,\n              srclang: 'en'\n            }\n          ]\n        }}\n      />\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_AliPlayer\",\n    packageName: \"@components/AliPlayer\",\n    component: component_6\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_7\n},{\n    name: \"_config\",\n    packageName: \"@components/AliPlayer/mock\",\n    component: component_8\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import * as component_1 from '@components/AliSpeech';\nimport * as component_2 from 'antd';\nimport * as component_3 from '@kne/remote-loader';\nconst readmeConfig = {\n    name: `AliSpeech`,\n    summary: `<p>对接阿里语音转换服务</p>`,\n    \n    \n    api: `<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n</table>`,\n    example: {\n        isFull: false,\n        className: `AliSpeech_0262b`,\n        style: ``,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { createWithRemoteLoader } = remoteLoader;\nconst { default: AliSpeech, AliSpeechRender } = _AliSpeech;\nconst { Button, Alert, Space } = antd;\nconst { useState } = React;\nconst BaseExample = createWithRemoteLoader({\n  modules: [\n    'components-core:Global@PureGlobal',\n    'components-core:Global@usePreset',\n    'components-core:InfoPage',\n    'components-core:FormInfo',\n    'components-core:Descriptions'\n  ]\n})(({ remoteModules }) => {\n  const [PureGlobal, usePreset, InfoPage, FormInfo, Descriptions] = remoteModules;\n  const { useFormModal, fields } = FormInfo;\n  const { Input } = fields;\n  const formModal = useFormModal();\n  const { ajax } = usePreset();\n  const [params, setParams] = useState(null);\n  const ajaxForm = async ({ data }) => {\n    console.log(data);\n    return {\n      data: {\n        code: 0,\n        data: { id: '111111' }\n      }\n    };\n  };\n\n  return (\n    <PureGlobal\n      preset={{\n        ajax,\n        ajaxForm,\n        apis: {\n          ossUpload: ajaxForm,\n          aliSpeech: {\n            getToken: {\n              loader: async () => {\n                return params;\n              }\n            }\n          }\n        }\n      }}\n    >\n      <InfoPage>\n        <InfoPage.Part title=\"先在这里设置token\">\n          <InfoPage.Part>\n            {params && (\n              <Descriptions\n                dataSource={[\n                  [{ label: 'appKey', content: params.appKey }],\n                  [\n                    {\n                      label: 'token',\n                      content: params.token\n                    }\n                  ]\n                ]}\n              />\n            )}\n          </InfoPage.Part>\n          <InfoPage.Part>\n            <Button\n              onClick={() => {\n                const formModalApi = formModal({\n                  title: '设置token',\n                  size: 'small',\n                  formProps: {\n                    data: Object.assign({}, params),\n                    onSubmit: data => {\n                      setParams(data);\n                      formModalApi.close();\n                    }\n                  },\n                  children: (\n                    <FormInfo\n                      column={1}\n                      list={[<Input name=\"appKey\" label=\"appKey\" rule=\"REQ\" />, <Input name=\"token\" label=\"token\" rule=\"REQ\" />]}\n                    />\n                  )\n                });\n              }}\n            >\n              点击设置token\n            </Button>\n          </InfoPage.Part>\n        </InfoPage.Part>\n        {params && (\n          <>\n            <InfoPage.Part title=\"普通示例\">\n              <AliSpeech\n                taskId={AliSpeech.getUUID()}\n                onCancel={() => {\n                  console.log('取消');\n                }}\n                onComplete={message => {\n                  console.log(message);\n                }}\n              />\n            </InfoPage.Part>\n            <InfoPage.Part title=\"children render用法\">\n              <AliSpeechRender\n                taskId={AliSpeech.getUUID()}\n                onCancel={() => {\n                  console.log('取消');\n                }}\n                onComplete={message => {\n                  console.log('>>>>>>>>>>>>>>>', message);\n                }}\n              >\n                {({ recording, result, change, cancel }) => {\n                  return (\n                    <Space direction=\"vertical\">\n                      {result && <Alert message={result} />}\n                      <Button onClick={change}>{recording ? '录音中' : '点击开始'}</Button>\n                      {recording && <Button onClick={cancel}>取消</Button>}\n                    </Space>\n                  );\n                }}\n              </AliSpeechRender>\n            </InfoPage.Part>\n          </>\n        )}\n      </InfoPage>\n    </PureGlobal>\n  );\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_AliSpeech\",\n    packageName: \"@components/AliSpeech\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import * as component_4 from '@components/Speech';\nimport * as component_5 from 'antd';\nconst readmeConfig = {\n    name: `Speech`,\n    summary: `<p>用户处理语音识别、语音转文字等，对接阿里的智能语音交互服务</p>`,\n    \n    \n    api: `<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n</table>`,\n    example: {\n        isFull: false,\n        className: `Speech_04a83`,\n        style: ``,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { AudioRecordButton, AudioPlayerButton, useAudioPlayer } = _Speech;\nconst { useState } = React;\nconst { Button } = antd;\n\nconst DurationButton = ({ src }) => {\n  const { getDuration } = useAudioPlayer({ src });\n  return (\n    <Button\n      onClick={() => {\n        getDuration().then(time => console.log(time));\n      }}\n    >\n      获取时长\n    </Button>\n  );\n};\n\nconst BaseExample = () => {\n  const [record, setRecord] = useState(null);\n  return (\n    <>\n      <AudioRecordButton\n        onStart={() => {\n          setRecord(null);\n        }}\n        onComplete={chunks => {\n          setRecord(new Blob(chunks, { type: chunks[0].type }));\n        }}\n      />\n      {record && (\n        <>\n          <AudioPlayerButton src={record} />\n          <DurationButton src={record} />\n        </>\n      )}\n    </>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_Speech\",\n    packageName: \"@components/Speech\",\n    component: component_4\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_5\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","// extracted by mini-css-extract-plugin\nexport default {};","import style from './style.module.scss';\nimport { getOrLoadRemote } from '@kne/remote-loader';\nimport { createWithFetch } from '@kne/react-fetch';\nimport { useId, useEffect, useRef } from 'react';\nimport classnames from 'classnames';\nimport useRefCallback from '@kne/use-ref-callback';\nimport once from 'lodash/once';\n\nconst AliPlayer = createWithFetch({\n  loading: null,\n  loader: async () => {\n    await Promise.all([\n      new Promise((resolve, reject) => {\n        if (!document.head.querySelector(`link[href*=\"aliplayer-min.css\"]`)) {\n          const dom = document.createElement('link');\n          dom.setAttribute('href', 'https://g.alicdn.com/de/prismplayer/2.15.2/skins/default/aliplayer-min.css');\n          dom.setAttribute('rel', 'stylesheet');\n          document.head.append(dom);\n          dom.addEventListener('load', () => {\n            resolve();\n          });\n          dom.addEventListener('error', reject);\n        } else {\n          resolve();\n        }\n      }),\n      getOrLoadRemote('Aliplayer', '', 'https://g.alicdn.com/apsara-media-box/imp-web-player/2.16.3/aliplayer-min.js')\n    ]);\n    return { Aliplayer: window.Aliplayer };\n  }\n})(({ className, data, getApi, playerOptions: options }) => {\n  const containerId = useId().replace(/:/g, '_');\n  const Aliplayer = useRef(data.Aliplayer);\n  const playerOptions = useRef(options);\n  const aliplayerRef = useRef();\n  const { source } = options;\n  playerOptions.current = options;\n  const apiCallback = useRefCallback(getApi);\n  useEffect(() => {\n    aliplayerRef.current = new Aliplayer.current(\n      Object.assign(\n        {\n          autoplay: false\n        },\n        playerOptions.current,\n        { id: containerId, source }\n      ),\n      function (player) {\n        apiCallback(player);\n        if (playerOptions.current?.seekTime) {\n          const handler = once(() => {\n            player.seek(playerOptions.current.seekTime);\n            setTimeout(() => {\n              if (player.getCurrentTime() > 0) {\n                document.documentElement.removeEventListener('mousemove', handler, true);\n              } else {\n                document.documentElement.addEventListener('mousemove', handler, true);\n              }\n            }, 1000);\n          });\n          document.documentElement.addEventListener('mousemove', handler, true);\n        }\n      }\n    );\n\n    return () => {\n      aliplayerRef.current && aliplayerRef.current.tag && aliplayerRef.current.dispose();\n    };\n  }, [containerId, source, apiCallback]);\n  return (\n    <div className={classnames(className, style['ali-player'])}>\n      <div id={containerId} />\n    </div>\n  );\n});\n\nexport default AliPlayer;\n","import { v4 as uuidv4 } from 'uuid';\n\nconst getUUId = () => {\n  return uuidv4().replace(/-/g, '');\n};\n\nexport default getUUId;\n","import { useRef } from 'react';\nimport useRefCallback from '@kne/use-ref-callback';\nimport getUUId from './getUUID';\n\nconst useSpeech = ({ taskId, getToken, onChange }) => {\n  const wsRef = useRef(null);\n  const start = useRefCallback(async ({ stream }) => {\n      const tokenRes = await getToken();\n      if (!tokenRes) {\n        throw new Error('获取token失败');\n      }\n\n      const { token, appKey } = tokenRes;\n      const ws = new WebSocket(`wss://nls-gateway-cn-shanghai.aliyuncs.com/ws/v1?token=${token}`);\n      const messageId = getUUId();\n      await new Promise(resolve => {\n        console.log('open');\n        ws.addEventListener('open', () => {\n          console.log('socket链接成功');\n          ws.send(\n            JSON.stringify({\n              header: {\n                message_id: messageId,\n                task_id: taskId,\n                namespace: 'SpeechTranscriber',\n                name: 'StartTranscription',\n                appkey: appKey\n              },\n              payload: {\n                format: 'pcm',\n                sample_rate: 16000,\n                max_sentence_silence: 200,\n                enable_intermediate_result: true,\n                enable_punctuation_prediction: true,\n                enable_inverse_text_normalization: true\n              }\n            })\n          );\n        });\n        ws.addEventListener('message', e => {\n          const data = JSON.parse(e.data);\n          if (data.header.name === 'TranscriptionStarted') {\n            console.log('start');\n            resolve();\n          }\n          if (data.header.name === 'TranscriptionResultChanged') {\n            onChange && onChange(data.payload);\n          }\n          if (data.header.name === 'SentenceEnd') {\n            onChange && onChange(data.payload);\n          }\n        });\n      });\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 16000\n      });\n      const audioInput = audioContext.createMediaStreamSource(stream);\n\n      // 设置缓冲区大小为2048的脚本处理器\n      const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n      scriptProcessor.onaudioprocess = function (event) {\n        const inputData = event.inputBuffer.getChannelData(0);\n        const inputData16 = new Int16Array(inputData.length);\n        for (let i = 0; i < inputData.length; ++i) {\n          inputData16[i] = Math.max(-1, Math.min(1, inputData[i])) * 0x7fff; // PCM 16-bit\n        }\n        ws.send(inputData16.buffer);\n      };\n      audioInput.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      console.log('开始识别');\n\n      wsRef.current = { ws, taskId, messageId, scriptProcessor, audioInput, stream, audioContext, appKey };\n    }),\n    end = useRefCallback(() => {\n      if (!wsRef.current) {\n        console.warn('连接尚未建立或者已经断开');\n        return;\n      }\n      const { ws, taskId, messageId, scriptProcessor, audioInput, audioContext, appKey } = wsRef.current;\n      ws.send(\n        JSON.stringify({\n          header: {\n            message_id: messageId,\n            task_id: taskId,\n            namespace: 'SpeechTranscriber',\n            name: 'StopTranscription',\n            appkey: appKey\n          }\n        })\n      );\n      ws.close();\n      if (scriptProcessor) {\n        scriptProcessor.disconnect();\n      }\n      if (audioInput) {\n        audioInput.disconnect();\n      }\n      if (audioContext) {\n        audioContext.close();\n      }\n      wsRef.current = null;\n\n      return { taskId, messageId };\n    });\n  return { start, end };\n};\n\nexport default useSpeech;\n","import { createWithRemoteLoader } from '@kne/remote-loader';\nimport { useState, useMemo } from 'react';\nimport useSpeech from './useSpeech';\nimport { useAudioRecord } from '@components/Speech';\nimport useRefCallback from '@kne/use-ref-callback';\n\nexport const AliSpeechRender = createWithRemoteLoader({\n  modules: ['components-core:Global@usePreset']\n})(({ remoteModules, taskId, onComplete, onUpload, onCancel, audioName, children, ...props }) => {\n  const [usePreset] = remoteModules;\n  const { ajax, apis } = usePreset();\n  const [resultChunks, setResultChunks] = useState({});\n  const result = useMemo(() => {\n    return Object.keys(resultChunks)\n      .sort((a, b) => a - b)\n      .map(index => resultChunks[index])\n      .join('');\n  }, [resultChunks]);\n  const { start, end } = useSpeech({\n    taskId,\n    onChange: data => {\n      setResultChunks(chunks => {\n        return Object.assign({}, chunks, { [data.index]: data.result });\n      });\n    },\n    getToken: async () => {\n      const { data } = await ajax(Object.assign({}, apis.aliSpeech.getToken));\n      if (data.code !== 0) {\n        return;\n      }\n      return data.data;\n    }\n  });\n\n  const { recording, start: startRecord, stop: stopRecord } = useAudioRecord();\n\n  const handlerStart = useRefCallback(async () => {\n    setResultChunks([]);\n    const { stream } = await startRecord();\n    await start({ stream });\n  });\n\n  const handlerCancel = useRefCallback(async () => {\n    await stopRecord();\n    end();\n    onCancel && onCancel();\n  });\n\n  const handlerComplete = useRefCallback(async () => {\n    const chunks = await stopRecord();\n    const { taskId, messageId } = end();\n    const file = new File([new Blob(chunks, { type: 'audio/wav' })], `${audioName || `${taskId}-${messageId}`}.wav`, { type: 'audio/wav' });\n    const { data: resData } = await (typeof onUpload === 'function' ? onUpload : apis.ossUpload)({ file });\n    if (resData.code !== 0) {\n      return;\n    }\n    onComplete && onComplete({ taskId, messageId, result, audio: resData.data });\n  });\n\n  const handlerChange = useRefCallback((...args) => (recording ? handlerComplete(...args) : handlerStart(...args)));\n\n  return children({\n    ...props,\n    recording,\n    result,\n    start: handlerStart,\n    cancel: handlerCancel,\n    complete: handlerComplete,\n    change: handlerChange\n  });\n});\n\nconst withAliSpeech = WrappedComponent => props => {\n  return (\n    <AliSpeechRender {...props}>\n      {({ result, start, complete, cancel, ...props }) => (\n        <WrappedComponent {...props} result={result} cancel={cancel} onStart={start} onComplete={complete} />\n      )}\n    </AliSpeechRender>\n  );\n};\n\nexport default withAliSpeech;\n","const getApis = options => {\n  const { prefix } = Object.assign({}, { prefix: '/api' }, options);\n  return {\n    getToken: {\n      url: `${prefix}/getToken`,\n      method: 'POST'\n    }\n  };\n};\n\nexport default getApis;\n","import { AudioRecordButton } from '@components/Speech';\nimport withAliSpeech, { AliSpeechRender } from './withAliSpeech';\nimport getUUID from './getUUID';\nimport useSpeech from './useSpeech';\n\nconst AliSpeech = withAliSpeech(({ result, onStart, onComplete, ...props }) => {\n  return (\n    <>\n      <AudioRecordButton {...props} onStart={onStart} onComplete={onComplete} />\n      {result && <div>{result}</div>}\n    </>\n  );\n});\n\nAliSpeech.getUUID = getUUID;\nAliSpeech.useSpeech = useSpeech;\nAliSpeech.AliSpeechRender = AliSpeechRender;\n\nexport default AliSpeech;\n\nexport { getUUID, useSpeech, AliSpeechRender };\n\nexport { default as getApis } from './getApis';\n","import { useState, useRef } from 'react';\nimport { App } from 'antd';\nimport useRefCallback from '@kne/use-ref-callback';\nimport { createWithRemoteLoader } from '@kne/remote-loader';\n\nexport const useAudioRecord = options => {\n  const { onComplete, onData, onStart } = Object.assign({}, options);\n  const [recording, setRecording] = useState(false);\n  const audioRef = useRef([]);\n  const { message } = App.useApp();\n  const handlerComplete = useRefCallback(onComplete);\n  const handlerData = useRefCallback(onData);\n  const handlerStart = useRefCallback(onStart);\n  const start = useRefCallback(async () => {\n    const stream = await window.navigator.mediaDevices.getUserMedia({ audio: true }).catch(e => {\n      message.error('出错，请确保已允许浏览器获取录音权限');\n      throw e;\n    });\n    const recorder = new window.MediaRecorder(stream);\n    audioRef.current = { stream, recorder };\n    const events = [\n      [\n        'start',\n        () => {\n          audioRef.current.chunks = [];\n          handlerStart({ stream, recorder });\n        }\n      ],\n      [\n        'dataavailable',\n        e => {\n          handlerData(e.data);\n          audioRef.current.chunks.push(e.data);\n        }\n      ]\n    ];\n    audioRef.current.events = events;\n    events.forEach(([name, handler]) => recorder.addEventListener(name, handler));\n    recorder.start(1000);\n    setRecording(true);\n    return { stream, recorder };\n  });\n\n  const stop = useRefCallback(async isUnmount => {\n    !isUnmount && setRecording(false);\n    if (!audioRef.current) {\n      return [];\n    }\n    const { events, recorder, stream, chunks } = audioRef.current;\n    events.forEach(([name, handler]) => recorder.removeEventListener(name, handler));\n    stream.getTracks().forEach(track => track.stop());\n    audioRef.current = null;\n    await handlerComplete(chunks);\n    return chunks;\n  });\n\n  const change = useRefCallback(async () => {\n    if (recording) {\n      await stop();\n    } else {\n      await start();\n    }\n  });\n\n  return {\n    recording,\n    start,\n    stop,\n    change\n  };\n};\n\nexport const withAudioRecord = WrappedComponent => {\n  return ({ onComplete, onData, onStart, ...props }) => {\n    const { recording, start, stop, change } = useAudioRecord({ onComplete, onData, onStart });\n\n    return <WrappedComponent {...props} recording={recording} start={start} stop={stop} onClick={change} />;\n  };\n};\n\nexport const AudioRecordRender = ({ children, ...props }) => {\n  return children(props);\n};\n\nconst AudioRecordButton = withAudioRecord(\n  createWithRemoteLoader({\n    modules: ['components-core:LoadingButton']\n  })(({ remoteModules, recording, children, start, stop, ...props }) => {\n    const [LoadingButton] = remoteModules;\n    return <LoadingButton {...props}>{children ? children(recording) : recording ? '正在录制' : '点击开始'}</LoadingButton>;\n  })\n);\n\nexport default AudioRecordButton;\n","import { useEffect, useState, useMemo } from 'react';\nimport { Button } from 'antd';\n\nexport const useAudioPlayer = ({ src }) => {\n  const [playing, setPlaying] = useState(false);\n  const audio = useMemo(() => {\n    if (!src) {\n      return;\n    }\n    return new Audio(src instanceof Blob ? URL.createObjectURL(src) : src);\n  }, [src]);\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => {\n      setPlaying(false);\n    });\n    return () => {\n      if (src instanceof Blob) {\n        URL.revokeObjectURL(audio.src);\n      }\n    };\n  }, [audio, src]);\n\n  return {\n    playing,\n    play: async () => {\n      audio.currentTime = 0;\n      await audio.play();\n      setPlaying(true);\n    },\n    pause: () => {\n      audio.pause();\n      setPlaying(false);\n    },\n    getDuration: async () => {\n      if (!audio.duration) {\n        return new Promise((resolve, reject) => {\n          audio.addEventListener('loadedmetadata', () => {\n            resolve();\n          });\n          audio.addEventListener('error', e => {\n            reject(e);\n          });\n        });\n      }\n      return audio.duration * 1000;\n    }\n  };\n};\n\nexport const withAudioPlayer = WrappedComponent => {\n  return ({ src, ...props }) => {\n    const { playing, play, pause } = useAudioPlayer({ src });\n    return (\n      <>\n        <WrappedComponent\n          {...props}\n          playing={playing}\n          onClick={() => {\n            if (playing) {\n              pause();\n            } else {\n              play();\n            }\n          }}\n        />\n      </>\n    );\n  };\n};\n\nexport const AudioPlayerRender = withAudioPlayer(({ children, ...props }) => {\n  return children(props);\n});\n\nconst AudioPlayerButton = withAudioPlayer(({ playing, ...props }) => {\n  return <Button {...props}>{playing ? '正在播放...' : '点击播放'}</Button>;\n});\n\nexport default AudioPlayerButton;\n"],"names":["exSrtSrc","exVideoSrc","_exVideoSrc","name","summary","api","example","isFull","className","style","list","title","description","code","scope","packageName","component","createWithFetch","loading","loader","async","Promise","all","resolve","reject","document","head","querySelector","dom","createElement","setAttribute","append","addEventListener","getOrLoadRemote","Aliplayer","window","_ref","data","getApi","playerOptions","options","containerId","useId","replace","useRef","aliplayerRef","source","current","apiCallback","useRefCallback","useEffect","Object","assign","autoplay","id","player","_playerOptions$curren","seekTime","handler","once","seek","setTimeout","getCurrentTime","documentElement","removeEventListener","tag","dispose","_jsx","classnames","children","getUUId","uuidv4","taskId","getToken","onChange","wsRef","start","stream","_ref2","tokenRes","Error","token","appKey","ws","WebSocket","concat","messageId","console","log","send","JSON","stringify","header","message_id","task_id","namespace","appkey","payload","format","sample_rate","max_sentence_silence","enable_intermediate_result","enable_punctuation_prediction","enable_inverse_text_normalization","e","parse","audioContext","AudioContext","webkitAudioContext","sampleRate","audioInput","createMediaStreamSource","scriptProcessor","createScriptProcessor","onaudioprocess","event","inputData","inputBuffer","getChannelData","inputData16","Int16Array","length","i","Math","max","min","buffer","connect","destination","end","warn","close","disconnect","AliSpeechRender","createWithRemoteLoader","modules","remoteModules","onComplete","onUpload","onCancel","audioName","props","_objectWithoutProperties","_excluded","usePreset","ajax","apis","resultChunks","setResultChunks","useState","result","useMemo","keys","sort","a","b","map","index","join","useSpeech","chunks","aliSpeech","recording","startRecord","stop","stopRecord","useAudioRecord","handlerStart","handlerCancel","handlerComplete","file","File","Blob","type","resData","ossUpload","audio","handlerChange","arguments","_objectSpread","cancel","complete","change","prefix","url","method","AliSpeech","WrappedComponent","_excluded2","onStart","withAliSpeech","_jsxs","_Fragment","AudioRecordButton","getUUID","onData","setRecording","audioRef","message","App","useApp","handlerData","navigator","mediaDevices","getUserMedia","catch","error","recorder","MediaRecorder","events","push","forEach","isUnmount","getTracks","track","withAudioRecord","_ref3","onClick","AudioRecordRender","_ref4","_ref5","_excluded3","LoadingButton","useAudioPlayer","src","playing","setPlaying","Audio","URL","createObjectURL","revokeObjectURL","play","currentTime","pause","getDuration","duration","withAudioPlayer","AudioPlayerRender","Button"],"sourceRoot":""}